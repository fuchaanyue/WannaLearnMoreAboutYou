"""
Django settings for wannalearnmoreaboutyou project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import Config, RepositoryEnv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Define PRIVATE_FILES_DIR - Check for Render environment first
import os

# Check if we're in Render environment with mounted files
if 'RENDER' in os.environ:
    # In Render, use the mounted file path
    PRIVATE_FILES_DIR = Path('/etc/secrets')
else:
    # Local development or other environments
    PRIVATE_FILES_DIR = BASE_DIR / "private_files"

# Load environment variables with explicit UTF-8 encoding
env_path = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_path):
    # Read and decode the file with UTF-8 to avoid BOM issues
    with open(env_path, 'rb') as f:
        raw_content = f.read()
        # Handle BOM if present
        if raw_content.startswith(b'\xff\xfe') or raw_content.startswith(b'\xfe\xff'):
            # UTF-16 BOM
            content = raw_content.decode('utf-16')
        elif raw_content.startswith(b'\xef\xbb\xbf'):
            # UTF-8 BOM
            content = raw_content.decode('utf-8-sig')
        else:
            # Standard UTF-8
            content = raw_content.decode('utf-8')
    
    # Write clean content to a temporary location or process directly
    lines = content.strip().split('\n')
    env_dict = {}
    for line in lines:
        if line.strip() and not line.startswith('#'):
            if '=' in line:
                key, value = line.split('=', 1)
                env_dict[key.strip()] = value.strip()
    
    # Create a mock config function
    def config(key, default=None, cast=None):
        value = env_dict.get(key, default)
        if cast == bool:
            if isinstance(value, str):
                return value.lower() in ['true', '1', 'yes', 'on']
            return bool(value)
        elif cast is not None:
            return cast(value)
        return value
else:
    # Fallback to original config if .env doesn't exist
    from decouple import config

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-l)f4sb=-li1u$#1=s$^(+dlms7$5bzf8j5n^ay%i2*7i_g5ap8')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ['wannalearnmoreaboutyou.onrender.com']

# Ensure HTTPS is handled correctly on Render
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Get quiz answer from environment variable
QUIZ_ANSWER = config("QUIZ_ANSWER", default="2")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'wannalearnmoreaboutyou.quiz',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wannalearnmoreaboutyou.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wannalearnmoreaboutyou.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (Private files)
MEDIA_URL = '/private/'
MEDIA_ROOT = PRIVATE_FILES_DIR

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session settings
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_SAVE_EVERY_REQUEST = True

# Private files directory
# Already defined above with environment-specific logic

# 腾讯云COS配置
TENCENT_COS_SECRET_ID = config('TENCENT_COS_SECRET_ID', default='')
TENCENT_COS_SECRET_KEY = config('TENCENT_COS_SECRET_KEY', default='')
TENCENT_COS_REGION = config('TENCENT_COS_REGION', default='')
TENCENT_COS_BUCKET = config('TENCENT_COS_BUCKET', default='')

# 邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)